[{"D:\\Festivals\\Festivals - front\\src\\index.js":"1","D:\\Festivals\\Festivals - front\\src\\components\\festival\\Festival.js":"2","D:\\Festivals\\Festivals - front\\src\\services\\auth.js":"3","D:\\Festivals\\Festivals - front\\src\\components\\login\\Login.js":"4","D:\\Festivals\\Festivals - front\\src\\reducers\\index.js":"5","D:\\Festivals\\Festivals - front\\src\\apis\\Axios.js":"6","D:\\Festivals\\Festivals - front\\src\\reducers\\GetPlacesReducers.js":"7","D:\\Festivals\\Festivals - front\\src\\actions\\GetPlaces.js":"8","D:\\Festivals\\Festivals - front\\src\\components\\festival\\CreateFestival.js":"9"},{"size":2242,"mtime":1624544015377,"results":"10","hashOfConfig":"11"},{"size":9154,"mtime":1624538687056,"results":"12","hashOfConfig":"11"},{"size":506,"mtime":1624427768301,"results":"13","hashOfConfig":"11"},{"size":1214,"mtime":1611766870085,"results":"14","hashOfConfig":"11"},{"size":167,"mtime":1624427730571,"results":"15","hashOfConfig":"11"},{"size":571,"mtime":1624426991114,"results":"16","hashOfConfig":"11"},{"size":243,"mtime":1624427627302,"results":"17","hashOfConfig":"11"},{"size":399,"mtime":1624427285942,"results":"18","hashOfConfig":"11"},{"size":4486,"mtime":1624544657246,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k3ws7g",{"filePath":"22","messages":"23","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Festivals\\Festivals - front\\src\\index.js",[],"D:\\Festivals\\Festivals - front\\src\\components\\festival\\Festival.js",["40","41","42","43","44"],"import React from 'react';\r\nimport {Table, Button, Form,InputGroup} from 'react-bootstrap'\r\nimport Axios from '../../apis/Axios';\r\nimport getPlacesAction from \"../../actions/GetPlaces\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Festival extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let festival = {\r\n            id : -1,\r\n            name: \"\",\r\n            dateStart : \"\",\r\n            dateEnd : \"\",\r\n            ticketPrice : 0,\r\n            availableTickets : 0,\r\n            place : {}\r\n        }\r\n\r\n        this.state = {festival : festival,\r\n            places: [], festivals: [], \r\n            pageNo : 0,totalPages : 0,\r\n            placeId : null, name : \"\" }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getFestivals(0);\r\n        this.getPlaces();\r\n    }\r\n\r\n    getFestivals(pageNo) {\r\n        let config = {\r\n            params: {\r\n                pageNo: pageNo,\r\n               \r\n            },\r\n          }\r\n\r\n        Axios.get('/festivals', config)\r\n            .then(res => {\r\n                 // handle success\r\n                 console.log(res);\r\n                 this.setState({pageNo : pageNo,\r\n                     festivals: res.data, \r\n                      totalPages : res.headers[\"total-pages\"]});\r\n            })\r\n            .catch(error => {\r\n                // handle error\r\n                console.log(error);\r\n                alert('Error at loading festivals');\r\n            });\r\n    }\r\n\r\n    getPlaces(){\r\n        Axios.get('/places')\r\n            .then(res => {\r\n                 // handle success\r\n                 console.log(res);\r\n                 this.setState({places: res.data});\r\n            })\r\n            .catch(error => {\r\n                // handle error\r\n                console.log(error);\r\n                alert('Error at loading places.');\r\n            });\r\n    }\r\n\r\n    renderPlacesOptions() {\r\n        <option value={-1}></option>\r\n        {this.state.places.map((place) => {\r\n          return (\r\n            <option value={place.id} key={place.id}>\r\n              {place.city}\r\n            </option>\r\n          );\r\n        })}\r\n    }\r\n\r\n    placeChange(e,id,name,dateStart,dateEnd,ticketPrice,availableTickets){\r\n        this.placeSelectionChanged(e);\r\n        this.edit(id,name,dateStart,dateEnd,ticketPrice,availableTickets);\r\n    }\r\n    placeSelectionChanged(e){\r\n        // console.log(e);\r\n\r\n        let placeId= e.target.value;\r\n        let place = this.state.places.find((placeDTO) => placeDTO.id == placeId);\r\n        console.log(place);\r\n\r\n        let festival = this.state.festival;\r\n        festival.place = place;\r\n\r\n        this.setState({festival : festival});\r\n        this.setState({placeId : placeId});\r\n                \r\n    }\r\n\r\n    nameInputChanged(e) {\r\n        let input = e.target;\r\n    \r\n        let name = input.name;\r\n        let value = input.value;\r\n\r\n        console.log(name + \", \" + value);\r\n\r\n        name = this.state.name;\r\n\r\n        name = value;\r\n\r\n        this.setState({name : name})\r\n        this.search();\r\n        console.log(name);\r\n      }\r\n\r\n      search() {\r\n        var params = {\r\n            'name' : this.state.name,\r\n            'placeId' : this.state.placeId\r\n        }\r\n\r\n        Axios.get('/festivals/search', {params})\r\n            .then(res => {\r\n                 // handle success\r\n                 console.log(res);\r\n                 this.setState({festivals : res.data});\r\n                 \r\n            })\r\n            .catch(error => {\r\n                // handle error\r\n                console.log(error);\r\n                alert('Error at searching');\r\n            });\r\n    }\r\n\r\n    goToCreate(){\r\n        this.props.history.push('/festivals/create');\r\n    }\r\n\r\n\r\n\r\n    delete(id) {\r\n        Axios.delete('/festivals/' + id)\r\n        .then(res => {\r\n            // handle success\r\n            console.log(res);\r\n            alert('Festival deleted successfully');\r\n            window.location.reload();\r\n        })\r\n        .catch(error => {\r\n            // handle error\r\n            console.log(error);\r\n            alert('Problem with deleting');\r\n         });\r\n    }\r\n\r\n    goToReserve(id){\r\n        this.props.history.push('/festivals/reserve/' + id);\r\n    }\r\n\r\n    \r\n\r\n    renderFestivals() {\r\n        return this.state.festivals.map((festival) => {\r\n            return (\r\n               <tr key={festival.id}>\r\n                  <td>{festival.name}</td>\r\n                  <td><InputGroup>\r\n                    <Form.Control as=\"select\" id=\"place\" value={festival.place.id} name=\"place\" onChange={e=> this.placeChange(e,festival.id,festival.name,festival.dateStart,festival.dateEnd,festival.ticketPrice,festival.availableTickets)}>\r\n                        \r\n                    <option value={-1}></option>\r\n          {this.state.places.map((place) => {\r\n            return (\r\n              <option value={place.id} key={place.id}>\r\n                {place.city}\r\n              </option>\r\n            );\r\n          })}\r\n                    </Form.Control>\r\n                    </InputGroup></td>\r\n                  <td>{festival.dateStart}</td>\r\n                  <td>{festival.dateEnd}</td>\r\n                  <td>{festival.ticketPrice}</td>\r\n                  <td>{festival.availableTickets}</td>\r\n                  <td> <Button  hidden={festival.availableTickets < 1 || festival.finished == true} onClick={() => this.goToReserve(festival.id)}>Reserve</Button></td>\r\n                  <td><Button  variant=\"danger\" onClick={() => this.delete(festival.id)}>Delete</Button></td>\r\n\r\n               \r\n               </tr>\r\n            )\r\n         })\r\n    }\r\n\r\n    \r\n\r\n    edit(id,name,dateStart,dateEnd,ticketPrice,availableTickets){\r\n        let festival = this.state.festival;\r\n        \r\n        let festivalDTO = {\r\n\r\n            id : id,\r\n            name: name,\r\n            dateStart : dateStart,\r\n            dateEnd : dateEnd,\r\n            ticketPrice : ticketPrice,\r\n            availableTickets : availableTickets,\r\n            place : festival.place\r\n\r\n        }\r\n\r\n        Axios.put('/festivals/' + id, festivalDTO)\r\n        .then(res => {\r\n            console.log(res);\r\n            alert('Festival location successfully edited');\r\n            window.location.reload()\r\n            \r\n        })\r\n    \r\n        .catch(error => {\r\n            console.log(error);\r\n    \r\n            alert('Error! Edit not successfull');\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n     \r\n        return (\r\n            <div>\r\n            <div>\r\n                <Form>\r\n                    <Form.Label  htmlFor=\"place\">Place of event</Form.Label>\r\n                    <InputGroup>\r\n                    <Form.Control as=\"select\" id=\"place\" name=\"placeId\" onChange={(e)=> this.placeSelectionChanged(e)}\r\n                    onClick={e => this.search()}>\r\n                       <option value={-1}></option>\r\n                         {this.state.places.map((place) => {\r\n                         return (\r\n                            <option value={place.id} key={place.id}>\r\n                             {place.city}, {place.country}\r\n                      </option>\r\n                                  );\r\n                                  })} \r\n                       \r\n                    </Form.Control>\r\n                    </InputGroup>\r\n\r\n                    <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                    <Form.Control id=\"name\" placeholder=\"name of festival\" name=\"name\" onChange={e=> this.nameInputChanged(e)}></Form.Control>\r\n                </Form>\r\n                <br/>\r\n            </div>\r\n             \r\n             <Button variant=\"success\" onClick={(e) => this.goToCreate()}>Create festival</Button>\r\n             <div style={{float:\"right\"}}><Button disabled={this.state.pageNo==0} className=\"btn btn-primary\" onClick={() =>this.getFestivals(this.state.pageNo - 1)}>Previous</Button>\r\n                        <Button disabled={this.state.pageNo==this.state.totalPages-1} className=\"btn btn-primary\" onClick={() =>this.getFestivals(this.state.pageNo + 1)}>Next</Button>\r\n  </div>\r\n            <Table className=\"table table-striped\" style={{marginTop:5}}>\r\n                <thead className=\"thead-dark\">\r\n                    <tr>\r\n                        <th>Name of the festival</th>\r\n                        <th>Place of event</th>\r\n                        <th>Begining of the festival</th>\r\n                        <th>End of the festival</th>\r\n                        <th>Ticket price</th>\r\n                        <th>Available tickets</th>\r\n                        \r\n                        <th></th>\r\n                        <th></th>                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderFestivals()}\r\n                </tbody>                  \r\n            </Table>\r\n            \r\n        </div>\r\n    \r\n    );\r\n    \r\n            \r\n        \r\n}\r\n\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    // console.log(state);\r\n    return { places: state.places };\r\n  };\r\n  \r\n  export default connect(mapStateToProps, {\r\n    getPlaces: getPlacesAction,\r\n  })(Festival);",["45","46"],"D:\\Festivals\\Festivals - front\\src\\services\\auth.js",[],"D:\\Festivals\\Festivals - front\\src\\components\\login\\Login.js",[],"D:\\Festivals\\Festivals - front\\src\\reducers\\index.js",[],"D:\\Festivals\\Festivals - front\\src\\apis\\Axios.js",[],"D:\\Festivals\\Festivals - front\\src\\reducers\\GetPlacesReducers.js",[],"D:\\Festivals\\Festivals - front\\src\\actions\\GetPlaces.js",[],"D:\\Festivals\\Festivals - front\\src\\components\\festival\\CreateFestival.js",["47"],{"ruleId":"48","severity":1,"message":"49","line":72,"column":9,"nodeType":"50","messageId":"51","endLine":78,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":89,"column":70,"nodeType":"54","messageId":"55","endLine":89,"endColumn":72},{"ruleId":"52","severity":1,"message":"53","line":186,"column":92,"nodeType":"54","messageId":"55","endLine":186,"endColumn":94},{"ruleId":"52","severity":1,"message":"53","line":258,"column":78,"nodeType":"54","messageId":"55","endLine":258,"endColumn":80},{"ruleId":"52","severity":1,"message":"53","line":259,"column":60,"nodeType":"54","messageId":"55","endLine":259,"endColumn":62},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"52","severity":1,"message":"53","line":54,"column":66,"nodeType":"54","messageId":"55","endLine":54,"endColumn":68},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-global-assign","no-unsafe-negation"]